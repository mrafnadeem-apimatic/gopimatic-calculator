/*
Package apimaticcalculator

This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
*/
package apimaticcalculator

import (
    "apimaticcalculator/controllers"
    "github.com/apimatic/go-core-runtime/https"
    "net/http"
)

const USER_AGENT = "APIMATIC 3.0"
type client struct {
    callBuilderFactory         https.CallBuilderFactory
    config                     Configuration
    SimpleCalculatorController controllers.SimpleCalculatorController
}

// Constructor for client.
func NewClient(config Configuration) *client {
    client := &client{
        config: config,
    }
    
    client.callBuilderFactory = callBuilderHandler(
    	func(server string) string {
    		if server == "" {
    			server = "Calculator"
    		}
    		return getBaseUri(Server(server), client.config)
    	},
    	nil,
    	https.NewHttpClient(config.HttpConfiguration()),
    	config.httpConfiguration.RetryConfiguration(),
        withUserAgent(USER_AGENT),
    )
    
    baseController := controllers.NewBaseController(client)
    client.SimpleCalculatorController = *controllers.NewSimpleCalculatorController(*baseController)
    return client
}

func (c *client) GetCallBuilder() https.CallBuilderFactory {
    return c.callBuilderFactory
}

func getBaseUri(
    server Server,
    config Configuration) string {
    if config.Environment() == Environment(PRODUCTION) {
        if server == Server(CALCULATOR) {
            return "https://examples.apimatic.io/apps/calculator"
        }
    }
    return "TODO: Select a valid server."
}

type clientOptions func(cb https.CallBuilder)

func callBuilderHandler(
    baseUrlProvider func(server string) string,
    auth https.Authenticator,
    httpClient https.HttpClient,
    retryConfig https.RetryConfiguration,
    opts ...clientOptions) https.CallBuilderFactory {
    callBuilderFactory := https.CreateCallBuilderFactory(baseUrlProvider, auth, httpClient, retryConfig)
    return tap(callBuilderFactory, opts...)
}

func tap(
    callBuilderFactory https.CallBuilderFactory,
    opts ...clientOptions) https.CallBuilderFactory {
    return func(httpMethod, path string) https.CallBuilder {
    	callBuilder := callBuilderFactory(httpMethod, path)
    	for _, opt := range opts {
    		opt(callBuilder)
    	}
    	return callBuilder
    }
}

func withUserAgent(userAgent string) clientOptions {
    f := func(request *http.Request) *http.Request {
    	request.Header.Add("user-agent", userAgent)
    	return request
    }
    return func(cb https.CallBuilder) {
    	cb.InterceptRequest(f)
    }
}
